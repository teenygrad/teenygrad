# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FXGraph

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ExampleInputs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExampleInputs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExampleInputs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExampleInputs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ExampleInputs
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FXGraph.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExampleInputs
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExampleInputs
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ExampleInputs
    def Kwargs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FXGraph.KeyValue import KeyValue
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExampleInputs
    def KwargsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExampleInputs
    def KwargsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ExampleInputsStart(builder):
    builder.StartObject(2)

def Start(builder):
    ExampleInputsStart(builder)

def ExampleInputsAddInputs(builder, inputs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)

def AddInputs(builder, inputs):
    ExampleInputsAddInputs(builder, inputs)

def ExampleInputsStartInputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInputsVector(builder, numElems):
    return ExampleInputsStartInputsVector(builder, numElems)

def ExampleInputsAddKwargs(builder, kwargs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(kwargs), 0)

def AddKwargs(builder, kwargs):
    ExampleInputsAddKwargs(builder, kwargs)

def ExampleInputsStartKwargsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKwargsVector(builder, numElems):
    return ExampleInputsStartKwargsVector(builder, numElems)

def ExampleInputsEnd(builder):
    return builder.EndObject()

def End(builder):
    return ExampleInputsEnd(builder)
