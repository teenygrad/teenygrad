/*
 * Copyright (c) 2025 Teenygrad. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
 
namespace FXGraph;

enum DType : byte {
  FLOAT32 = 0,
  FLOAT64 = 1,
  INT32 = 2,
  INT64 = 3,
  UINT8 = 4,
  INT8 = 5,
  BOOL = 6,
  BFLOAT16 = 7,
  FLOAT16 = 8
}

table SymInt {
  value: string;
}

table ValInt {
  value: int;
}

union Value {
  valint: ValInt,  
}

table ValueWrapper {
  value: Value;
}

table KeyValue {
  key: string;
  value: ValueWrapper;
}

table Shape {
  dims: [SymInt];
}

table Tensor {
  dtype: DType;
  device: string;
  shape: Shape;
  stride: [uint];
  requires_grad: bool = false;
}

union Placeholder {
  symint: SymInt,
  tensor: Tensor,
}

table PlaceholderWrapper {
  name: string;
  value: Placeholder;
  target: string;
  users: [string];
}

table CallFunction {
  name: string;
}

table CallMethod {
  name: string;
}

table CallModule {
  name: string;
}

table GetAttr {
  name: string;
}

table Output {
  name: string;
}

union Node {
  placeholder: PlaceholderWrapper,
  call_function: CallFunction,
  call_method: CallMethod,
  call_module: CallModule,
  get_attr: GetAttr,
  output: Output,
}

table NodeWrapper {
  node: Node;
}

union ExampleInput {
  symint: SymInt,
  tensor: Tensor
}

table ExampleInputWrapper {
  value: ExampleInput;
}

table ExampleInputs {
  inputs: [ExampleInputWrapper];
  kwargs: [KeyValue];  // For keyword arguments
}

table Graph {
  nodes: [NodeWrapper];
  example_inputs: ExampleInputs;
}

root_type Graph;