// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc2)
    %c1024_i32_0 = arith.constant 1024 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c1024_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c1024_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<1024xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<1024xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<1024xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<1024xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<1024xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<1024xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<1024xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc8)
    %24 = tt.load %23, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %25 = arith.addf %21, %24 : tensor<1024xf32> loc(#loc10)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc11)
    %27 = tt.addptr %26, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc11)
    tt.store %27, %25, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @add_kernel) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc2)
    %c1024_i32_0 = arith.constant 1024 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c1024_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c1024_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<1024xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<1024xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<1024xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<1024xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<1024xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<1024xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<1024xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc8)
    %24 = tt.load %23, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %25 = arith.addf %21, %24 : tensor<1024xf32> loc(#loc10)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc11)
    %27 = tt.addptr %26, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc11)
    tt.store %27, %25, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %12 = ttg.convert_layout %11 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc8)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %15 = ttg.convert_layout %14 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc10)
    %17 = tt.load %15, %16 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %18 = ttg.convert_layout %17 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc10)
    %19 = arith.addf %12, %18 : tensor<1024xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %22 = ttg.convert_layout %21 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %23 = ttg.convert_layout %19 : tensor<1024xf32, #blocked> -> tensor<1024xf32, #blocked1> loc(#loc13)
    %24 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc13)
    tt.store %22, %23, %24 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %12 = ttg.convert_layout %11 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc8)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %15 = ttg.convert_layout %14 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc10)
    %17 = tt.load %15, %16 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %18 = ttg.convert_layout %17 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc10)
    %19 = arith.addf %12, %18 : tensor<1024xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %22 = ttg.convert_layout %21 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %23 = ttg.convert_layout %19 : tensor<1024xf32, #blocked> -> tensor<1024xf32, #blocked1> loc(#loc13)
    %24 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc13)
    tt.store %22, %23, %24 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonNvidiaGPUMMALoweringPass (triton-nvidia-mma-lowering) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUAllocateWarpGroups (tritongpu-allocate-warp-groups) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before SCFToControlFlowPass (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritionTensorMemoryAllocationPass (triton-tensor-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %1 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %2 = llvm.mul %1, %0 : i32 loc(#loc3)
    %3 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %4 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %6 = llvm.urem %4, %5 : i32 loc(#loc4)
    %7 = llvm.udiv %4, %5 : i32 loc(#loc4)
    %8 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %9 = nvgpu.cluster_id loc(#loc4)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %11 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %12 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %13 = llvm.and %6, %12 : i32 loc(#loc4)
    %14 = llvm.icmp "eq" %13, %11 : i32 loc(#loc4)
    %15 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %16 = llvm.select %14, %11, %15 : i1, i32 loc(#loc4)
    %17 = llvm.xor %11, %16 : i32 loc(#loc4)
    %18 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %19 = llvm.and %6, %18 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %11 : i32 loc(#loc4)
    %21 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %22 = llvm.select %20, %11, %21 : i1, i32 loc(#loc4)
    %23 = llvm.xor %17, %22 : i32 loc(#loc4)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %25 = llvm.and %6, %24 : i32 loc(#loc4)
    %26 = llvm.icmp "eq" %25, %11 : i32 loc(#loc4)
    %27 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %28 = llvm.select %26, %11, %27 : i1, i32 loc(#loc4)
    %29 = llvm.xor %23, %28 : i32 loc(#loc4)
    %30 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %31 = llvm.and %6, %30 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %11 : i32 loc(#loc4)
    %33 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %34 = llvm.select %32, %11, %33 : i1, i32 loc(#loc4)
    %35 = llvm.xor %29, %34 : i32 loc(#loc4)
    %36 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %37 = llvm.and %6, %36 : i32 loc(#loc4)
    %38 = llvm.icmp "eq" %37, %11 : i32 loc(#loc4)
    %39 = llvm.mlir.constant(64 : i32) : i32 loc(#loc4)
    %40 = llvm.select %38, %11, %39 : i1, i32 loc(#loc4)
    %41 = llvm.xor %35, %40 : i32 loc(#loc4)
    %42 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %43 = llvm.and %7, %42 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %11 : i32 loc(#loc4)
    %45 = llvm.mlir.constant(128 : i32) : i32 loc(#loc4)
    %46 = llvm.select %44, %11, %45 : i1, i32 loc(#loc4)
    %47 = llvm.xor %41, %46 : i32 loc(#loc4)
    %48 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %49 = llvm.and %7, %48 : i32 loc(#loc4)
    %50 = llvm.icmp "eq" %49, %11 : i32 loc(#loc4)
    %51 = llvm.mlir.constant(256 : i32) : i32 loc(#loc4)
    %52 = llvm.select %50, %11, %51 : i1, i32 loc(#loc4)
    %53 = llvm.xor %47, %52 : i32 loc(#loc4)
    %54 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %55 = llvm.xor %53, %54 : i32 loc(#loc4)
    %56 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %57 = llvm.xor %53, %56 : i32 loc(#loc4)
    %58 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %59 = llvm.xor %53, %58 : i32 loc(#loc4)
    %60 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %61 = llvm.xor %53, %60 : i32 loc(#loc4)
    %62 = llvm.mlir.constant(512 : i32) : i32 loc(#loc4)
    %63 = llvm.xor %53, %62 : i32 loc(#loc4)
    %64 = llvm.mlir.constant(513 : i32) : i32 loc(#loc4)
    %65 = llvm.xor %53, %64 : i32 loc(#loc4)
    %66 = llvm.mlir.constant(514 : i32) : i32 loc(#loc4)
    %67 = llvm.xor %53, %66 : i32 loc(#loc4)
    %68 = llvm.mlir.constant(515 : i32) : i32 loc(#loc4)
    %69 = llvm.xor %53, %68 : i32 loc(#loc4)
    %70 = llvm.add %55, %3 : i32 loc(#loc4)
    %71 = llvm.add %57, %3 : i32 loc(#loc4)
    %72 = llvm.add %59, %3 : i32 loc(#loc4)
    %73 = llvm.add %61, %3 : i32 loc(#loc4)
    %74 = llvm.add %63, %3 : i32 loc(#loc4)
    %75 = llvm.add %65, %3 : i32 loc(#loc4)
    %76 = llvm.add %67, %3 : i32 loc(#loc4)
    %77 = llvm.add %69, %3 : i32 loc(#loc4)
    %78 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %79 = llvm.insertvalue %70, %78[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %80 = llvm.insertvalue %71, %79[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %81 = llvm.insertvalue %72, %80[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %82 = llvm.insertvalue %73, %81[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %83 = llvm.insertvalue %74, %82[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %84 = llvm.insertvalue %75, %83[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %85 = llvm.insertvalue %76, %84[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %86 = llvm.insertvalue %77, %85[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %87 = llvm.bitcast %2 : i32 to i32 loc(#loc5)
    %88 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %89 = llvm.insertvalue %87, %88[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %90 = llvm.insertvalue %87, %89[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %91 = llvm.insertvalue %87, %90[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %92 = llvm.insertvalue %87, %91[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %93 = llvm.insertvalue %87, %92[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %94 = llvm.insertvalue %87, %93[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %95 = llvm.insertvalue %87, %94[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %96 = llvm.insertvalue %87, %95[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %97 = llvm.extractvalue %96[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %98 = llvm.extractvalue %96[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %99 = llvm.extractvalue %96[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %100 = llvm.extractvalue %96[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %101 = llvm.extractvalue %96[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %102 = llvm.extractvalue %96[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %103 = llvm.extractvalue %96[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %104 = llvm.extractvalue %96[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %105 = llvm.extractvalue %86[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %106 = llvm.extractvalue %86[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %107 = llvm.extractvalue %86[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %108 = llvm.extractvalue %86[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %109 = llvm.extractvalue %86[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %110 = llvm.extractvalue %86[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %111 = llvm.extractvalue %86[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %112 = llvm.extractvalue %86[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %113 = llvm.add %97, %105 : i32 loc(#loc5)
    %114 = llvm.add %98, %106 : i32 loc(#loc5)
    %115 = llvm.add %99, %107 : i32 loc(#loc5)
    %116 = llvm.add %100, %108 : i32 loc(#loc5)
    %117 = llvm.add %101, %109 : i32 loc(#loc5)
    %118 = llvm.add %102, %110 : i32 loc(#loc5)
    %119 = llvm.add %103, %111 : i32 loc(#loc5)
    %120 = llvm.add %104, %112 : i32 loc(#loc5)
    %121 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %122 = llvm.insertvalue %113, %121[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %123 = llvm.insertvalue %114, %122[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %124 = llvm.insertvalue %115, %123[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %125 = llvm.insertvalue %116, %124[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %126 = llvm.insertvalue %117, %125[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %127 = llvm.insertvalue %118, %126[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %128 = llvm.insertvalue %119, %127[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %129 = llvm.insertvalue %120, %128[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %130 = llvm.bitcast %arg3 : i32 to i32 loc(#loc6)
    %131 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %132 = llvm.insertvalue %130, %131[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %133 = llvm.insertvalue %130, %132[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %134 = llvm.insertvalue %130, %133[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %135 = llvm.insertvalue %130, %134[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %136 = llvm.insertvalue %130, %135[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %137 = llvm.insertvalue %130, %136[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %138 = llvm.insertvalue %130, %137[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %139 = llvm.insertvalue %130, %138[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %140 = llvm.extractvalue %129[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %141 = llvm.extractvalue %129[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %142 = llvm.extractvalue %129[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %143 = llvm.extractvalue %129[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %144 = llvm.extractvalue %129[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %145 = llvm.extractvalue %129[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %146 = llvm.extractvalue %129[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %147 = llvm.extractvalue %129[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %148 = llvm.extractvalue %139[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %149 = llvm.extractvalue %139[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %150 = llvm.extractvalue %139[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %151 = llvm.extractvalue %139[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %152 = llvm.extractvalue %139[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %153 = llvm.extractvalue %139[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %154 = llvm.extractvalue %139[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %155 = llvm.extractvalue %139[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %156 = llvm.icmp "slt" %140, %148 : i32 loc(#loc6)
    %157 = llvm.icmp "slt" %141, %149 : i32 loc(#loc6)
    %158 = llvm.icmp "slt" %142, %150 : i32 loc(#loc6)
    %159 = llvm.icmp "slt" %143, %151 : i32 loc(#loc6)
    %160 = llvm.icmp "slt" %144, %152 : i32 loc(#loc6)
    %161 = llvm.icmp "slt" %145, %153 : i32 loc(#loc6)
    %162 = llvm.icmp "slt" %146, %154 : i32 loc(#loc6)
    %163 = llvm.icmp "slt" %147, %155 : i32 loc(#loc6)
    %164 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %165 = llvm.insertvalue %156, %164[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %166 = llvm.insertvalue %156, %165[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %167 = llvm.insertvalue %156, %166[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %168 = llvm.insertvalue %156, %167[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %169 = llvm.insertvalue %160, %168[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %170 = llvm.insertvalue %160, %169[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %171 = llvm.insertvalue %160, %170[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %172 = llvm.insertvalue %160, %171[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %173 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc7)
    %174 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %175 = llvm.insertvalue %173, %174[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %176 = llvm.insertvalue %173, %175[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %177 = llvm.insertvalue %173, %176[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %178 = llvm.insertvalue %173, %177[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %179 = llvm.insertvalue %173, %178[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %180 = llvm.insertvalue %173, %179[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %181 = llvm.insertvalue %173, %180[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %182 = llvm.insertvalue %173, %181[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %183 = llvm.extractvalue %182[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %184 = llvm.extractvalue %182[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %185 = llvm.extractvalue %182[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %186 = llvm.extractvalue %182[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %187 = llvm.extractvalue %182[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %188 = llvm.extractvalue %182[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %189 = llvm.extractvalue %182[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %190 = llvm.extractvalue %182[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %191 = llvm.extractvalue %129[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %192 = llvm.extractvalue %129[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %193 = llvm.extractvalue %129[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %194 = llvm.extractvalue %129[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %195 = llvm.extractvalue %129[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %196 = llvm.extractvalue %129[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %197 = llvm.extractvalue %129[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %198 = llvm.extractvalue %129[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %199 = llvm.getelementptr %183[%191] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %200 = llvm.getelementptr %184[%192] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %201 = llvm.getelementptr %185[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %202 = llvm.getelementptr %186[%194] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %203 = llvm.getelementptr %187[%195] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %204 = llvm.getelementptr %188[%196] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %205 = llvm.getelementptr %189[%197] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %206 = llvm.getelementptr %190[%198] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %207 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %208 = llvm.insertvalue %199, %207[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %209 = llvm.insertvalue %200, %208[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %210 = llvm.insertvalue %201, %209[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %211 = llvm.insertvalue %202, %210[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %212 = llvm.insertvalue %203, %211[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %213 = llvm.insertvalue %204, %212[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %214 = llvm.insertvalue %205, %213[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %215 = llvm.insertvalue %206, %214[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %216 = llvm.extractvalue %215[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %217 = llvm.extractvalue %215[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %218 = llvm.extractvalue %215[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %219 = llvm.extractvalue %215[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %220 = llvm.extractvalue %215[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %221 = llvm.extractvalue %215[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %222 = llvm.extractvalue %215[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %223 = llvm.extractvalue %215[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %224 = llvm.extractvalue %172[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %225 = llvm.extractvalue %172[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %226 = llvm.extractvalue %172[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %227 = llvm.extractvalue %172[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %228 = llvm.extractvalue %172[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %229 = llvm.extractvalue %172[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %230 = llvm.extractvalue %172[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %231 = llvm.extractvalue %172[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %232 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %216, %224 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %233 = llvm.extractvalue %232[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %234 = llvm.bitcast %233 : i32 to vector<1xf32> loc(#loc8)
    %235 = llvm.extractvalue %232[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %236 = llvm.bitcast %235 : i32 to vector<1xf32> loc(#loc8)
    %237 = llvm.extractvalue %232[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %238 = llvm.bitcast %237 : i32 to vector<1xf32> loc(#loc8)
    %239 = llvm.extractvalue %232[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %240 = llvm.bitcast %239 : i32 to vector<1xf32> loc(#loc8)
    %241 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %242 = llvm.extractelement %234[%241 : i32] : vector<1xf32> loc(#loc8)
    %243 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %244 = llvm.extractelement %236[%243 : i32] : vector<1xf32> loc(#loc8)
    %245 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %246 = llvm.extractelement %238[%245 : i32] : vector<1xf32> loc(#loc8)
    %247 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %248 = llvm.extractelement %240[%247 : i32] : vector<1xf32> loc(#loc8)
    %249 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %220, %228 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %250 = llvm.extractvalue %249[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %251 = llvm.bitcast %250 : i32 to vector<1xf32> loc(#loc8)
    %252 = llvm.extractvalue %249[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %253 = llvm.bitcast %252 : i32 to vector<1xf32> loc(#loc8)
    %254 = llvm.extractvalue %249[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %255 = llvm.bitcast %254 : i32 to vector<1xf32> loc(#loc8)
    %256 = llvm.extractvalue %249[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %257 = llvm.bitcast %256 : i32 to vector<1xf32> loc(#loc8)
    %258 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %259 = llvm.extractelement %251[%258 : i32] : vector<1xf32> loc(#loc8)
    %260 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %261 = llvm.extractelement %253[%260 : i32] : vector<1xf32> loc(#loc8)
    %262 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %263 = llvm.extractelement %255[%262 : i32] : vector<1xf32> loc(#loc8)
    %264 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %265 = llvm.extractelement %257[%264 : i32] : vector<1xf32> loc(#loc8)
    %266 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %267 = llvm.insertvalue %242, %266[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %268 = llvm.insertvalue %244, %267[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %269 = llvm.insertvalue %246, %268[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %270 = llvm.insertvalue %248, %269[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %271 = llvm.insertvalue %259, %270[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %272 = llvm.insertvalue %261, %271[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %273 = llvm.insertvalue %263, %272[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %274 = llvm.insertvalue %265, %273[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %275 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc9)
    %276 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc9)
    %277 = llvm.insertvalue %275, %276[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %278 = llvm.insertvalue %275, %277[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %279 = llvm.insertvalue %275, %278[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %280 = llvm.insertvalue %275, %279[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %281 = llvm.insertvalue %275, %280[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %282 = llvm.insertvalue %275, %281[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %283 = llvm.insertvalue %275, %282[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %284 = llvm.insertvalue %275, %283[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %285 = llvm.extractvalue %284[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %286 = llvm.extractvalue %284[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %287 = llvm.extractvalue %284[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %288 = llvm.extractvalue %284[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %289 = llvm.extractvalue %284[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %290 = llvm.extractvalue %284[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %291 = llvm.extractvalue %284[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %292 = llvm.extractvalue %284[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %293 = llvm.extractvalue %129[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %294 = llvm.extractvalue %129[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %295 = llvm.extractvalue %129[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %296 = llvm.extractvalue %129[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %297 = llvm.extractvalue %129[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %298 = llvm.extractvalue %129[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %299 = llvm.extractvalue %129[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %300 = llvm.extractvalue %129[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %301 = llvm.getelementptr %285[%293] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %302 = llvm.getelementptr %286[%294] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %303 = llvm.getelementptr %287[%295] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %304 = llvm.getelementptr %288[%296] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %305 = llvm.getelementptr %289[%297] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %306 = llvm.getelementptr %290[%298] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %307 = llvm.getelementptr %291[%299] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %308 = llvm.getelementptr %292[%300] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %309 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc9)
    %310 = llvm.insertvalue %301, %309[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %311 = llvm.insertvalue %302, %310[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %312 = llvm.insertvalue %303, %311[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %313 = llvm.insertvalue %304, %312[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %314 = llvm.insertvalue %305, %313[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %315 = llvm.insertvalue %306, %314[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %316 = llvm.insertvalue %307, %315[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %317 = llvm.insertvalue %308, %316[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %318 = llvm.extractvalue %317[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %319 = llvm.extractvalue %317[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %320 = llvm.extractvalue %317[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %321 = llvm.extractvalue %317[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %322 = llvm.extractvalue %317[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %323 = llvm.extractvalue %317[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %324 = llvm.extractvalue %317[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %325 = llvm.extractvalue %317[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %326 = llvm.extractvalue %172[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %327 = llvm.extractvalue %172[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %328 = llvm.extractvalue %172[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %329 = llvm.extractvalue %172[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %330 = llvm.extractvalue %172[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %331 = llvm.extractvalue %172[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %332 = llvm.extractvalue %172[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %333 = llvm.extractvalue %172[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %334 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %318, %326 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %335 = llvm.extractvalue %334[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %336 = llvm.bitcast %335 : i32 to vector<1xf32> loc(#loc10)
    %337 = llvm.extractvalue %334[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %338 = llvm.bitcast %337 : i32 to vector<1xf32> loc(#loc10)
    %339 = llvm.extractvalue %334[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %340 = llvm.bitcast %339 : i32 to vector<1xf32> loc(#loc10)
    %341 = llvm.extractvalue %334[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %342 = llvm.bitcast %341 : i32 to vector<1xf32> loc(#loc10)
    %343 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %344 = llvm.extractelement %336[%343 : i32] : vector<1xf32> loc(#loc10)
    %345 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %346 = llvm.extractelement %338[%345 : i32] : vector<1xf32> loc(#loc10)
    %347 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %348 = llvm.extractelement %340[%347 : i32] : vector<1xf32> loc(#loc10)
    %349 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %350 = llvm.extractelement %342[%349 : i32] : vector<1xf32> loc(#loc10)
    %351 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %322, %330 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %352 = llvm.extractvalue %351[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %353 = llvm.bitcast %352 : i32 to vector<1xf32> loc(#loc10)
    %354 = llvm.extractvalue %351[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %355 = llvm.bitcast %354 : i32 to vector<1xf32> loc(#loc10)
    %356 = llvm.extractvalue %351[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %357 = llvm.bitcast %356 : i32 to vector<1xf32> loc(#loc10)
    %358 = llvm.extractvalue %351[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %359 = llvm.bitcast %358 : i32 to vector<1xf32> loc(#loc10)
    %360 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %361 = llvm.extractelement %353[%360 : i32] : vector<1xf32> loc(#loc10)
    %362 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %363 = llvm.extractelement %355[%362 : i32] : vector<1xf32> loc(#loc10)
    %364 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %365 = llvm.extractelement %357[%364 : i32] : vector<1xf32> loc(#loc10)
    %366 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %367 = llvm.extractelement %359[%366 : i32] : vector<1xf32> loc(#loc10)
    %368 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %369 = llvm.insertvalue %344, %368[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %370 = llvm.insertvalue %346, %369[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %371 = llvm.insertvalue %348, %370[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %372 = llvm.insertvalue %350, %371[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %373 = llvm.insertvalue %361, %372[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %374 = llvm.insertvalue %363, %373[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %375 = llvm.insertvalue %365, %374[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %376 = llvm.insertvalue %367, %375[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %377 = llvm.extractvalue %274[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %378 = llvm.extractvalue %274[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %379 = llvm.extractvalue %274[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %380 = llvm.extractvalue %274[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %381 = llvm.extractvalue %274[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %382 = llvm.extractvalue %274[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %383 = llvm.extractvalue %274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %384 = llvm.extractvalue %274[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %385 = llvm.extractvalue %376[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %386 = llvm.extractvalue %376[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %387 = llvm.extractvalue %376[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %388 = llvm.extractvalue %376[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %389 = llvm.extractvalue %376[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %390 = llvm.extractvalue %376[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %391 = llvm.extractvalue %376[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %392 = llvm.extractvalue %376[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %393 = llvm.fadd %377, %385 : f32 loc(#loc11)
    %394 = llvm.fadd %378, %386 : f32 loc(#loc11)
    %395 = llvm.fadd %379, %387 : f32 loc(#loc11)
    %396 = llvm.fadd %380, %388 : f32 loc(#loc11)
    %397 = llvm.fadd %381, %389 : f32 loc(#loc11)
    %398 = llvm.fadd %382, %390 : f32 loc(#loc11)
    %399 = llvm.fadd %383, %391 : f32 loc(#loc11)
    %400 = llvm.fadd %384, %392 : f32 loc(#loc11)
    %401 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %402 = llvm.insertvalue %393, %401[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %403 = llvm.insertvalue %394, %402[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %404 = llvm.insertvalue %395, %403[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %405 = llvm.insertvalue %396, %404[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %406 = llvm.insertvalue %397, %405[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %407 = llvm.insertvalue %398, %406[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %408 = llvm.insertvalue %399, %407[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %409 = llvm.insertvalue %400, %408[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %410 = llvm.bitcast %arg2 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc12)
    %411 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc12)
    %412 = llvm.insertvalue %410, %411[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %413 = llvm.insertvalue %410, %412[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %414 = llvm.insertvalue %410, %413[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %415 = llvm.insertvalue %410, %414[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %416 = llvm.insertvalue %410, %415[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %417 = llvm.insertvalue %410, %416[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %418 = llvm.insertvalue %410, %417[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %419 = llvm.insertvalue %410, %418[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %420 = llvm.extractvalue %419[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %421 = llvm.extractvalue %419[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %422 = llvm.extractvalue %419[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %423 = llvm.extractvalue %419[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %424 = llvm.extractvalue %419[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %425 = llvm.extractvalue %419[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %426 = llvm.extractvalue %419[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %427 = llvm.extractvalue %419[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %428 = llvm.extractvalue %129[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %429 = llvm.extractvalue %129[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %430 = llvm.extractvalue %129[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %431 = llvm.extractvalue %129[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %432 = llvm.extractvalue %129[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %433 = llvm.extractvalue %129[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %434 = llvm.extractvalue %129[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %435 = llvm.extractvalue %129[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %436 = llvm.getelementptr %420[%428] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %437 = llvm.getelementptr %421[%429] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %438 = llvm.getelementptr %422[%430] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %439 = llvm.getelementptr %423[%431] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %440 = llvm.getelementptr %424[%432] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %441 = llvm.getelementptr %425[%433] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %442 = llvm.getelementptr %426[%434] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %443 = llvm.getelementptr %427[%435] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %444 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc12)
    %445 = llvm.insertvalue %436, %444[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %446 = llvm.insertvalue %437, %445[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %447 = llvm.insertvalue %438, %446[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %448 = llvm.insertvalue %439, %447[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %449 = llvm.insertvalue %440, %448[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %450 = llvm.insertvalue %441, %449[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %451 = llvm.insertvalue %442, %450[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %452 = llvm.insertvalue %443, %451[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %453 = llvm.extractvalue %452[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %454 = llvm.extractvalue %452[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %455 = llvm.extractvalue %452[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %456 = llvm.extractvalue %452[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %457 = llvm.extractvalue %452[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %458 = llvm.extractvalue %452[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %459 = llvm.extractvalue %452[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %460 = llvm.extractvalue %452[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %461 = llvm.extractvalue %409[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %462 = llvm.extractvalue %409[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %463 = llvm.extractvalue %409[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %464 = llvm.extractvalue %409[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %465 = llvm.extractvalue %409[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %466 = llvm.extractvalue %409[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %467 = llvm.extractvalue %409[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %468 = llvm.extractvalue %409[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %469 = llvm.extractvalue %172[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %470 = llvm.extractvalue %172[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %471 = llvm.extractvalue %172[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %472 = llvm.extractvalue %172[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %473 = llvm.extractvalue %172[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %474 = llvm.extractvalue %172[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %475 = llvm.extractvalue %172[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %476 = llvm.extractvalue %172[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %477 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %478 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc13)
    %479 = llvm.mlir.constant(32 : i32) : i32 loc(#loc13)
    %480 = llvm.urem %478, %479 : i32 loc(#loc13)
    %481 = llvm.udiv %478, %479 : i32 loc(#loc13)
    %482 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %483 = llvm.bitcast %461 : f32 to f32 loc(#loc13)
    %484 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %485 = llvm.insertelement %483, %482[%484 : i32] : vector<1xf32> loc(#loc13)
    %486 = llvm.bitcast %485 : vector<1xf32> to i32 loc(#loc13)
    %487 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %488 = llvm.bitcast %462 : f32 to f32 loc(#loc13)
    %489 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %490 = llvm.insertelement %488, %487[%489 : i32] : vector<1xf32> loc(#loc13)
    %491 = llvm.bitcast %490 : vector<1xf32> to i32 loc(#loc13)
    %492 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %493 = llvm.bitcast %463 : f32 to f32 loc(#loc13)
    %494 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %495 = llvm.insertelement %493, %492[%494 : i32] : vector<1xf32> loc(#loc13)
    %496 = llvm.bitcast %495 : vector<1xf32> to i32 loc(#loc13)
    %497 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %498 = llvm.bitcast %464 : f32 to f32 loc(#loc13)
    %499 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %500 = llvm.insertelement %498, %497[%499 : i32] : vector<1xf32> loc(#loc13)
    %501 = llvm.bitcast %500 : vector<1xf32> to i32 loc(#loc13)
    %502 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %486, %491, %496, %501, %453, %469 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %503 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %504 = llvm.bitcast %465 : f32 to f32 loc(#loc13)
    %505 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %506 = llvm.insertelement %504, %503[%505 : i32] : vector<1xf32> loc(#loc13)
    %507 = llvm.bitcast %506 : vector<1xf32> to i32 loc(#loc13)
    %508 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %509 = llvm.bitcast %466 : f32 to f32 loc(#loc13)
    %510 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %511 = llvm.insertelement %509, %508[%510 : i32] : vector<1xf32> loc(#loc13)
    %512 = llvm.bitcast %511 : vector<1xf32> to i32 loc(#loc13)
    %513 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %514 = llvm.bitcast %467 : f32 to f32 loc(#loc13)
    %515 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %516 = llvm.insertelement %514, %513[%515 : i32] : vector<1xf32> loc(#loc13)
    %517 = llvm.bitcast %516 : vector<1xf32> to i32 loc(#loc13)
    %518 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %519 = llvm.bitcast %468 : f32 to f32 loc(#loc13)
    %520 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %521 = llvm.insertelement %519, %518[%520 : i32] : vector<1xf32> loc(#loc13)
    %522 = llvm.bitcast %521 : vector<1xf32> to i32 loc(#loc13)
    %523 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %507, %512, %517, %522, %457, %473 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before ConvertWarpSpecializeToLLVM (convert-warp-specialize-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:61", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0), %arg4: !llvm.ptr<1> loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":10:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(256 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(128 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %13 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %14 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %15 = llvm.mul %14, %13 : i32 loc(#loc3)
    %16 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %17 = llvm.urem %16, %11 : i32 loc(#loc4)
    %18 = llvm.udiv %16, %11 : i32 loc(#loc4)
    %19 = llvm.and %17, %9 : i32 loc(#loc4)
    %20 = llvm.icmp "eq" %19, %10 : i32 loc(#loc4)
    %21 = llvm.select %20, %10, %8 : i1, i32 loc(#loc4)
    %22 = llvm.xor %10, %21 : i32 loc(#loc4)
    %23 = llvm.and %17, %7 : i32 loc(#loc4)
    %24 = llvm.icmp "eq" %23, %10 : i32 loc(#loc4)
    %25 = llvm.select %24, %10, %6 : i1, i32 loc(#loc4)
    %26 = llvm.xor %22, %25 : i32 loc(#loc4)
    %27 = llvm.and %17, %8 : i32 loc(#loc4)
    %28 = llvm.icmp "eq" %27, %10 : i32 loc(#loc4)
    %29 = llvm.select %28, %10, %5 : i1, i32 loc(#loc4)
    %30 = llvm.xor %26, %29 : i32 loc(#loc4)
    %31 = llvm.and %17, %6 : i32 loc(#loc4)
    %32 = llvm.icmp "eq" %31, %10 : i32 loc(#loc4)
    %33 = llvm.select %32, %10, %11 : i1, i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.and %17, %5 : i32 loc(#loc4)
    %36 = llvm.icmp "eq" %35, %10 : i32 loc(#loc4)
    %37 = llvm.select %36, %10, %4 : i1, i32 loc(#loc4)
    %38 = llvm.xor %34, %37 : i32 loc(#loc4)
    %39 = llvm.and %18, %9 : i32 loc(#loc4)
    %40 = llvm.icmp "eq" %39, %10 : i32 loc(#loc4)
    %41 = llvm.select %40, %10, %3 : i1, i32 loc(#loc4)
    %42 = llvm.xor %38, %41 : i32 loc(#loc4)
    %43 = llvm.and %18, %7 : i32 loc(#loc4)
    %44 = llvm.icmp "eq" %43, %10 : i32 loc(#loc4)
    %45 = llvm.select %44, %10, %2 : i1, i32 loc(#loc4)
    %46 = llvm.xor %42, %45 : i32 loc(#loc4)
    %47 = llvm.xor %46, %10 : i32 loc(#loc4)
    %48 = llvm.xor %46, %1 : i32 loc(#loc4)
    %49 = llvm.add %47, %12 : i32 loc(#loc4)
    %50 = llvm.add %48, %12 : i32 loc(#loc4)
    %51 = llvm.add %15, %49 : i32 loc(#loc5)
    %52 = llvm.add %15, %50 : i32 loc(#loc5)
    %53 = llvm.icmp "slt" %51, %arg3 : i32 loc(#loc6)
    %54 = llvm.icmp "slt" %52, %arg3 : i32 loc(#loc6)
    %55 = llvm.getelementptr %arg0[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %56 = llvm.getelementptr %arg0[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %57 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %55, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %58 = llvm.extractvalue %57[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %59 = llvm.bitcast %58 : i32 to vector<1xf32> loc(#loc8)
    %60 = llvm.extractvalue %57[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %61 = llvm.bitcast %60 : i32 to vector<1xf32> loc(#loc8)
    %62 = llvm.extractvalue %57[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %63 = llvm.bitcast %62 : i32 to vector<1xf32> loc(#loc8)
    %64 = llvm.extractvalue %57[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %65 = llvm.bitcast %64 : i32 to vector<1xf32> loc(#loc8)
    %66 = llvm.extractelement %59[%12 : i32] : vector<1xf32> loc(#loc8)
    %67 = llvm.extractelement %61[%12 : i32] : vector<1xf32> loc(#loc8)
    %68 = llvm.extractelement %63[%12 : i32] : vector<1xf32> loc(#loc8)
    %69 = llvm.extractelement %65[%12 : i32] : vector<1xf32> loc(#loc8)
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %56, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %71 = llvm.extractvalue %70[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %72 = llvm.bitcast %71 : i32 to vector<1xf32> loc(#loc8)
    %73 = llvm.extractvalue %70[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %74 = llvm.bitcast %73 : i32 to vector<1xf32> loc(#loc8)
    %75 = llvm.extractvalue %70[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %76 = llvm.bitcast %75 : i32 to vector<1xf32> loc(#loc8)
    %77 = llvm.extractvalue %70[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %78 = llvm.bitcast %77 : i32 to vector<1xf32> loc(#loc8)
    %79 = llvm.extractelement %72[%12 : i32] : vector<1xf32> loc(#loc8)
    %80 = llvm.extractelement %74[%12 : i32] : vector<1xf32> loc(#loc8)
    %81 = llvm.extractelement %76[%12 : i32] : vector<1xf32> loc(#loc8)
    %82 = llvm.extractelement %78[%12 : i32] : vector<1xf32> loc(#loc8)
    %83 = llvm.getelementptr %arg1[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %84 = llvm.getelementptr %arg1[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %83, %53 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %86 = llvm.extractvalue %85[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %87 = llvm.bitcast %86 : i32 to vector<1xf32> loc(#loc10)
    %88 = llvm.extractvalue %85[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %89 = llvm.bitcast %88 : i32 to vector<1xf32> loc(#loc10)
    %90 = llvm.extractvalue %85[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %91 = llvm.bitcast %90 : i32 to vector<1xf32> loc(#loc10)
    %92 = llvm.extractvalue %85[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %93 = llvm.bitcast %92 : i32 to vector<1xf32> loc(#loc10)
    %94 = llvm.extractelement %87[%12 : i32] : vector<1xf32> loc(#loc10)
    %95 = llvm.extractelement %89[%12 : i32] : vector<1xf32> loc(#loc10)
    %96 = llvm.extractelement %91[%12 : i32] : vector<1xf32> loc(#loc10)
    %97 = llvm.extractelement %93[%12 : i32] : vector<1xf32> loc(#loc10)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %84, %54 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %99 = llvm.extractvalue %98[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %100 = llvm.bitcast %99 : i32 to vector<1xf32> loc(#loc10)
    %101 = llvm.extractvalue %98[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %102 = llvm.bitcast %101 : i32 to vector<1xf32> loc(#loc10)
    %103 = llvm.extractvalue %98[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %104 = llvm.bitcast %103 : i32 to vector<1xf32> loc(#loc10)
    %105 = llvm.extractvalue %98[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %106 = llvm.bitcast %105 : i32 to vector<1xf32> loc(#loc10)
    %107 = llvm.extractelement %100[%12 : i32] : vector<1xf32> loc(#loc10)
    %108 = llvm.extractelement %102[%12 : i32] : vector<1xf32> loc(#loc10)
    %109 = llvm.extractelement %104[%12 : i32] : vector<1xf32> loc(#loc10)
    %110 = llvm.extractelement %106[%12 : i32] : vector<1xf32> loc(#loc10)
    %111 = llvm.fadd %66, %94 : f32 loc(#loc11)
    %112 = llvm.fadd %67, %95 : f32 loc(#loc11)
    %113 = llvm.fadd %68, %96 : f32 loc(#loc11)
    %114 = llvm.fadd %69, %97 : f32 loc(#loc11)
    %115 = llvm.fadd %79, %107 : f32 loc(#loc11)
    %116 = llvm.fadd %80, %108 : f32 loc(#loc11)
    %117 = llvm.fadd %81, %109 : f32 loc(#loc11)
    %118 = llvm.fadd %82, %110 : f32 loc(#loc11)
    %119 = llvm.getelementptr %arg2[%51] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %120 = llvm.getelementptr %arg2[%52] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %121 = llvm.insertelement %111, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %122 = llvm.bitcast %121 : vector<1xf32> to i32 loc(#loc13)
    %123 = llvm.insertelement %112, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %124 = llvm.bitcast %123 : vector<1xf32> to i32 loc(#loc13)
    %125 = llvm.insertelement %113, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %126 = llvm.bitcast %125 : vector<1xf32> to i32 loc(#loc13)
    %127 = llvm.insertelement %114, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %128 = llvm.bitcast %127 : vector<1xf32> to i32 loc(#loc13)
    %129 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %122, %124, %126, %128, %119, %53 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %130 = llvm.insertelement %115, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %131 = llvm.bitcast %130 : vector<1xf32> to i32 loc(#loc13)
    %132 = llvm.insertelement %116, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %133 = llvm.bitcast %132 : vector<1xf32> to i32 loc(#loc13)
    %134 = llvm.insertelement %117, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %135 = llvm.bitcast %134 : vector<1xf32> to i32 loc(#loc13)
    %136 = llvm.insertelement %118, %0[%10 : i32] : vector<1xf32> loc(#loc13)
    %137 = llvm.bitcast %136 : vector<1xf32> to i32 loc(#loc13)
    %138 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %131, %133, %135, %137, %120, %54 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":19:24)
#loc3 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":24:24)
#loc4 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:41)
#loc5 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":25:28)
#loc6 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":27:21)
#loc7 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:24)
#loc8 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":30:16)
#loc9 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:24)
#loc10 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":31:16)
#loc11 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":32:17)
#loc12 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:26)
#loc13 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:35)
#loc14 = loc("/home/arshadm/Workspace/projects/spinorml/venv/./src/vector_addition.py":34:4)


tensor([1.3713, 1.3076, 0.4940,  ..., 0.6466, 0.5249, 0.7940], device='cuda:0')
tensor([1.3713, 1.3076, 0.4940,  ..., 0.6466, 0.5249, 0.7940], device='cuda:0')
The maximum difference between torch and triton is 0.0
